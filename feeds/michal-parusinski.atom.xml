<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michal Parusinski - Personal Site - Michal Parusinski</title><link href="https://michal.parusinski.me/" rel="alternate"></link><link href="https://michal.parusinski.me/feeds/michal-parusinski.atom.xml" rel="self"></link><id>https://michal.parusinski.me/</id><updated>2025-08-14T12:00:00+02:00</updated><entry><title>Switching systemd-boot to GRUB on Archlinux</title><link href="https://michal.parusinski.me/swap-systemd-boot-with-grub.html" rel="alternate"></link><published>2025-08-14T12:00:00+02:00</published><updated>2025-08-14T12:00:00+02:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2025-08-14:/swap-systemd-boot-with-grub.html</id><summary type="html">&lt;p&gt;Switching systemd-boot to GRUB on Archlinux
so I can use tools snapper to create snapshots
before updating archlinux&lt;/p&gt;</summary><content type="html">&lt;p&gt;I intend to use BTRFS snapshots, snapper and pac-snap
to be able to rollback archlinux if an update goes 
wrong. However current it uses systemd-boot and the tools
I intend to use required GRUB.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;a class="headerlink" href="#requirements" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This tutorial is only meant for UEFI systems.
It requires a EFI partition mounted under &lt;code&gt;/boot&lt;/code&gt;
with enough disk space (in my case 512 MB should
be enough).&lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;efibootmgr&lt;/code&gt; to validate changes&lt;/p&gt;
&lt;h1 id="swapping-to-grub-with-btrfs-support"&gt;Swapping to GRUB with BTRFS support&lt;a class="headerlink" href="#swapping-to-grub-with-btrfs-support" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Install &lt;code&gt;grub&lt;/code&gt; and run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grub-install&lt;span class="w"&gt; &lt;/span&gt;--target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-efi&lt;span class="w"&gt; &lt;/span&gt;--efi-directory&lt;span class="o"&gt;=&lt;/span&gt;/boot&lt;span class="w"&gt; &lt;/span&gt;--bootloader-id&lt;span class="o"&gt;=&lt;/span&gt;GRUB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Edit the file &lt;code&gt;/etc/default/grub&lt;/code&gt; and copy over the relevant
fields from the systemd boot loader usually found under 
&lt;code&gt;/boot/loader/entries/arch.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For instance if your systemd-boot config looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;title   Arch Linux
linux   /vmlinuz-linux
initrd  /intel-ucode.img
initrd  /initramfs-linux.img
options cryptdevice=UUID=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:crypt root=/dev/mapper/crypt rootflags=subvol=arch_root splash rw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You need to copy &lt;code&gt;options&lt;/code&gt; field to &lt;code&gt;GRUB_CMDLINE_LINUX&lt;/code&gt; but do not copy
&lt;code&gt;root&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then generate the GRUB configuration &lt;code&gt;grub-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt;
and check the content of the file.&lt;/p&gt;
&lt;p&gt;For more articles about Linux the following 
RSS feed is available over &lt;a href="/feeds/linux.rss.xml"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="archlinux"></category><category term="linux"></category></entry><entry><title>Switching between High DPI and Low DPI in XMonad</title><link href="https://michal.parusinski.me/switching-between-high-low-dpi.html" rel="alternate"></link><published>2025-03-05T12:00:00+01:00</published><updated>2025-03-05T12:00:00+01:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2025-03-05:/switching-between-high-low-dpi.html</id><summary type="html">&lt;p&gt;I have created scripts to help automatically switch
between low DPI and high DPI settings in XMonad which
comes in handy on a high DPI laptop that may be connected
to low DPI monitors&lt;/p&gt;</summary><content type="html">&lt;h1 id="context"&gt;Context&lt;a class="headerlink" href="#context" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I enjoying using a tiling window manager on Linux. 
However it is hard to get 
them to work with my multiple monitor requirements.&lt;/p&gt;
&lt;p&gt;My situation can be described as follows:
1. I have multiple monitors, not all of them have the same DPI.
2. Not all of them are connected at the same time as I use a laptop.
   Sometimes I no monitors, sometimes three. And I like to plug them
   while the session is open.
3. Whenever possible I would like to have the highest DPI setting possible.&lt;/p&gt;
&lt;p&gt;DPI means dots per inch and loosely speaking refers to resolution.
High DPI monitors have such a high resolution they require bigger fonts
and upscaling.&lt;/p&gt;
&lt;p&gt;In general on Linux, Wayland based window managers and desktop 
environmenti, like Gnome or Hyprland handle the best high DPI settings. 
They support fractional scaling (for when monitors are 
halfway between low and high DPI). They work nicely with 
mixed setups like described above.&lt;/p&gt;
&lt;p&gt;However I am not yet satisfied with either Gnome (which
isn&amp;rsquo;t a dynamic tiling window manager), or Hyprland
(which seems to have a static approach to multiple monitors).
And I haven&amp;rsquo;t tried Sway yet. In the future I planned to revisit
Sway and Hyprland but in the meantime I wanted to get
XMonad to work well because I like how XMonad handle 
multiple monitors.&lt;/p&gt;
&lt;h1 id="finding-out-current-dpi"&gt;Finding out current DPI&lt;a class="headerlink" href="#finding-out-current-dpi" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I wrote a simple script using &lt;code&gt;xdpyinfo&lt;/code&gt; to fetch information
about the current DPI:&lt;/p&gt;
&lt;p&gt;TODO: This script is broken (fix this)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
xdpyinfo&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;dots&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tr&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will return a number giving the current DPI setting.
The purpose of this script to allow XMonad to tell the 
DPI setting and adapt accordingly. In my case I use it 
to tell which XMobar config to load (either a low DPI
setting or a high DPI setting).&lt;/p&gt;
&lt;h1 id="creating-configs-for-each-dpi-setting"&gt;Creating configs for each DPI setting&lt;a class="headerlink" href="#creating-configs-for-each-dpi-setting" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The main trick I use for multiple DPI setting is having multiple
config files for each DPI config. The files I differentiate are:
* &lt;code&gt;.xsession&lt;/code&gt; files for loading Xft settings
* &lt;code&gt;xmobarrc&lt;/code&gt; files for the XMobar status bar (with different dpi settings)&lt;/p&gt;
&lt;p&gt;So for instance here is the two x session files&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;File&lt;/th&gt;
    &lt;th&gt;Low DPI&lt;/th&gt;
    &lt;th&gt;High DPI&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;X Session file&lt;/td&gt;
    &lt;td&gt;
&lt;pre&gt;
&lt;code&gt;
Xft.dpi: 96
Xft.autohint: 0
Xft.lcdfilter: lcddefault
Xft.hintstyle: hintfull
Xft.hinting: 1
Xft.antialias: 1
Xft.rgba: rgb
&lt;/code&gt;
&lt;/pre&gt;
    &lt;/td&gt;
    &lt;td&gt;
&lt;pre&gt;
&lt;code&gt;
Xft.dpi: 192
Xft.autohint: 0
Xft.lcdfilter: lcddefault
Xft.hintstyle: hintfull
Xft.hinting: 1
Xft.antialias: 1
Xft.rgba: rgb
&lt;/code&gt;
&lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;XMobar config&lt;/td&gt;
    &lt;td&gt;
&lt;pre&gt;
&lt;code&gt;
Config { overrideRedirect = False
       , font      = "Fira Code 12"
       , additionalFonts = [ "Font Awesome 6 Free Solid 12"
                           , "Font Awesome 6 Brands 12"
                           ]
       , bgColor   = "#2E383C"
       , fgColor   = "#D3C6AA"
       , dpi       = 96
       , position  = TopH 30
       , commands  = [ Run Cpu
                        [ "-L", "5"
                        , "-H", "50"
                        , "--high", "red"
                        , "--low", "green"
                        ] 10
                    , Run Battery
                        [ "--template", "&lt;acstatus&gt;: &lt;left&gt;% - &lt;timeleft&gt;"
                        , "--"
                        , "-O", "AC"
                        , "-o", "Bat"
                        , "--high", "green"
                        , "--low", "red"
                        ] 10
                    , Run Memory ["--template", "Mem: &lt;usedratio&gt;%"] 10
                    , Run Date "%a %Y-%m-%d %H:%M" "date" 10
                    , Run XMonadLog
                    ]
        , sepChar  = "%"
        , alignSep = "}{"
        , template = "%XMonadLog% }{ %battery% | %cpu% | %memory% | %date% "
        }
&lt;/code&gt;
&lt;/pre&gt;
    &lt;/td&gt;
    &lt;td&gt;
&lt;pre&gt;
&lt;code&gt;
Config { overrideRedirect = False
       , font      = "Fira Code 12"
       , additionalFonts = [ "Font Awesome 6 Free Solid 12"
                           , "Font Awesome 6 Brands 12"
                           ]
       , bgColor   = "#2E383C"
       , fgColor   = "#D3C6AA"
       , dpi       = 192
       , position  = TopH 60
       , commands  = [ Run Cpu
                        [ "-L", "5"
                        , "-H", "50"
                        , "--high", "red"
                        , "--low", "green"
                        ] 10
                    , Run Battery
                        [ "--template", "&lt;acstatus&gt;: &lt;left&gt;% - &lt;timeleft&gt;"
                        , "--"
                        , "-O", "AC"
                        , "-o", "Bat"
                        , "--high", "green"
                        , "--low", "red"
                        ] 10
                    , Run Memory ["--template", "Mem: &lt;usedratio&gt;%"] 10
                    , Run Date "%a %Y-%m-%d %H:%M" "date" 10
                    , Run XMonadLog
                    ]
        , sepChar  = "%"
        , alignSep = "}{"
        , template = "%XMonadLog% }{ %battery% | %cpu% | %memory% | %date% "
        }
&lt;/code&gt;
&lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The main notable thing is that the font dpi changes in both case. The
rest is not important in this context.&lt;/p&gt;
&lt;h1 id="toggling-between-dpi-settings"&gt;Toggling between DPI settings&lt;a class="headerlink" href="#toggling-between-dpi-settings" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To switch between the two DPI a second script is created :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;DPI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;~/.local/bin/what-dpi.sh&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DPI&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-eq&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;192&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Switching to low DPI (96)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;xrdb&lt;span class="w"&gt; &lt;/span&gt;-merge&lt;span class="w"&gt; &lt;/span&gt;~/.config/xsession/xsession.lowdpi
&lt;span class="w"&gt;    &lt;/span&gt;xrandr&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;1920x1080
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Switching to high DPI (192)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;xrdb&lt;span class="w"&gt; &lt;/span&gt;-merge&lt;span class="w"&gt; &lt;/span&gt;~/.config/xsession/xsession.hidpi
&lt;span class="w"&gt;    &lt;/span&gt;xrandr&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;3840x2160
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script picks up the current DPI setting and applies the new setting
matching the opposite DPI setting. It does three things :
1. Change the Xft settings for fonts
2. Change the screen resolution&lt;/p&gt;
&lt;h1 id="incorporating-in-xmonad"&gt;Incorporating in XMonad&lt;a class="headerlink" href="#incorporating-in-xmonad" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Now we incorporate the logic in XMonad. First I define a data type
(to follow good programming practices)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;DPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;HiDPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;LowDPI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I create a status bar hook that takes a DPI as an input (and monitor number) and creates the 
appropriate instances of xmobar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;XMonad.Hooks.StatusBar&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;XMonad.Hooks.StatusBar.PP&lt;/span&gt;

&lt;span class="nf"&gt;mySB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;statusBarProp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xmobar -x &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpiConf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myXmobarPP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpiConf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;LowDPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; ~/.config/xmobar/xmobarrc.lowdpi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dpiConf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;HiDPI&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; ~/.config/xmobar/xmobarrc.hidpi&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;myXmobarPP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;PP&lt;/span&gt;
&lt;span class="nf"&gt;myXmobarPP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppSep&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppCurrent&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmobarColor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#7FBBB3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppVisible&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmobarColor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#A7C080&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppHidden&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmobarColor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#E67E80&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppHiddenNoWindows&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmobarColor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#D3C6AA&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppTitle&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmobarColor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#D3C6AA&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shorten&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppTitleSanitize&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmobarStrip&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then hook this into the main script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;fetchDPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;DPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="nf"&gt;fetchDPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybeOutH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;createProcess&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shellCmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std_out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;CreatePipe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;maybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;LowDPI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;processOut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybeOutH&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shellCmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/.local/bin/what-dpi.sh&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;processOut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Handle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;DPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;processOut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hGetLine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;currDpi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;readMaybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;HiDPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;intToDPIEnum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;currDpi&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;intToDPIEnum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;HiDPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;LowDPI&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fetchDPI&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;xmonadMain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmonadMain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmonad&lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ewmhFullscreen&lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ewmh&lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;withEasySB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mySB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toggleStrutsKey&lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;withEasySB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mySB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toggleStrutsKey&lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="kr"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toggleStrutsKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;XConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Layout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;KeyMask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;KeySym&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="n"&gt;toggleStrutsKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;XConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modMask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myModMask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myModMask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xK_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So let&amp;rsquo;s explain what happens :
1. When XMonad launches it fetches the current DPI from the &lt;code&gt;what-dpi.sh&lt;/code&gt; script. 
   This part is done in &lt;code&gt;fetchDPI&lt;/code&gt; and it is basically a lot of boilerplate code
   to start a process and return the DPI setting with lots of error off ramps to 
   default to a low DPI setting (in exotic cases it is safer to assume low DPI)
2. Launch the status bar using withEasySB multiple times as we may have multiple
   monitors with the appropriate DPI setting.&lt;/p&gt;
&lt;p&gt;Now this allows XMonad upon start to adapt but not when monitors are plugged in
or plugged out. For this I create a keyboard shortcut as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;myKeys&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M-v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;toggleSmartSpacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;XF86MonBrightnessUp&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;brightnessctl s +10%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;XF86MonBrightnessDown&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;brightnessctl s 10-%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;XF86AudioRaiseVolume&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;raiseVolume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;XF86AudioLowerVolume&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;lowerVolume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;XF86AudioMute&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;toggleMute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C-&amp;lt;Print&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scrot -s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C-&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/.local/bin/switch-dpi.sh; killall xmobar; xmonad --restart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I add a keyboard shortcut Control-&amp;rsquo; to request a DPI switch, kill xmobar
and restart xmonad.&lt;/p&gt;
&lt;p&gt;For more articles about Nix and NixOS the following 
RSS feed is available over &lt;a href="/feeds/nix.rss.xml"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="xmonad"></category><category term="xmonad"></category><category term="highdpi"></category><category term="lowdpi"></category></entry><entry><title>Managing databases users using nix</title><link href="https://michal.parusinski.me/manage-db-users-with-nix.html" rel="alternate"></link><published>2025-02-11T12:00:00+01:00</published><updated>2025-02-11T12:00:00+01:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2025-02-11:/manage-db-users-with-nix.html</id><summary type="html">&lt;p&gt;How to manage data users, specifically for MySQL/MariaDB
using Nix. The process involved declaring user configurations,
creating scripts to apply configurations and automating the
process with systemd.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I had the following challenge: manage database
(robotic) users using nix. More specifically I wanted
to declare a list of mariadb/mysql users, alongside
passwords, and permissions using nix. And while 
nix has some options for this (e.g. &lt;code&gt;services.mysql.ensureUsers.*.name&lt;/code&gt;).
Some aspects can&amp;rsquo;t be declared with nix options
like the credentials or its permissions for given databases.&lt;/p&gt;
&lt;p&gt;There is a way to solve this using nix using three steps:
  1. Declaring the user configuration in an object
  2. Creating nix packaged scripts that will apply a configuration to the database
  3. Creating a systemd unit that runs the previous scripts when appropriate&lt;/p&gt;
&lt;p&gt;In this article I will go into details on how this is done.
Note: although I focus on MySQL/MariaDB, the underlying principles
can be applied for PostgreSQL, Redis, &amp;hellip;&lt;/p&gt;
&lt;h1 id="declaring-the-user-configuration"&gt;Declaring the user configuration&lt;a class="headerlink" href="#declaring-the-user-configuration" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The first step is to encapsulate the information required
for configuring a user in a nix object (key-value dictionary).
In my case it looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;dbUsecaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;passwordFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; config&lt;span class="o"&gt;.&lt;/span&gt;age&lt;span class="o"&gt;.&lt;/span&gt;secrets&lt;span class="o"&gt;.&lt;/span&gt;usecasePass&lt;span class="o"&gt;.&lt;/span&gt;path&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_hostname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Should be self explanatory. Note &lt;code&gt;passwordFile&lt;/code&gt; is a path to 
a file, here I use &lt;code&gt;agenix&lt;/code&gt; to manage secrets, which decrypts the 
password file with adequate permissions to prevent leaks
(see article about &lt;a href="https://michal.parusinski.me/managin-secrets-in-nix-using-agenix.html"&gt;agenix&lt;/a&gt;).&lt;/p&gt;
&lt;h1 id="set-up-script-to-apply-configuration"&gt;Set up script to apply configuration&lt;a class="headerlink" href="#set-up-script-to-apply-configuration" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The second step is to create a script that applies the 
configuration. This is done using &lt;code&gt;pkgs.writeShellScript&lt;/code&gt;
which generates a shell script and stores it as nix 
component (under &lt;code&gt;/nix/store/&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The syntax of the function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;writeShellScript &lt;span class="s2"&gt;&amp;quot;file-name&amp;quot;&lt;/span&gt;
  &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;  Content of the file&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;  &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The file name here is not very important. The content of the script, however, is.
To make this modular, I use a function that takes a configuration as input
and produces a corresponding shell script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;applyMySQLConf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    database&lt;span class="p"&gt;,&lt;/span&gt;
    passwordFile&lt;span class="p"&gt;,&lt;/span&gt;
    username&lt;span class="p"&gt;,&lt;/span&gt;
    hostname
  &lt;span class="p"&gt;}:&lt;/span&gt;
  pkgs&lt;span class="o"&gt;.&lt;/span&gt;writeShellScript &lt;span class="s2"&gt;&amp;quot;applyMySQLConf&amp;quot;&lt;/span&gt;
    &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;      PASSWORD=$(cat &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;passwordFile&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s s-Multiline"&gt;)&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;      &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;mariadb&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s s-Multiline"&gt;/bin/mysql -u root -e &amp;quot;GRANT ALL PRIVILEGES ON &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;database&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s s-Multiline"&gt;.* TO &amp;#39;${username}&amp;#39;@&amp;#39;${hostname}&amp;#39; IDENTIFIED BY &amp;#39;$PASSWORD&amp;#39;;&amp;quot;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;    &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The details will depends on the use case. For instance for a PostgreSQL database
the actual commands used in the script will change.&lt;/p&gt;
&lt;p&gt;To generate a script for a given configuration will look this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;dbUsecaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;passwordFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; config&lt;span class="o"&gt;.&lt;/span&gt;age&lt;span class="o"&gt;.&lt;/span&gt;secrets&lt;span class="o"&gt;.&lt;/span&gt;usecasePass&lt;span class="o"&gt;.&lt;/span&gt;path&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_hostname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="ss"&gt;usecaseConfScript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; applyMySQLConf dbUsecaseConfig&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="automatically-apply-the-configuration-using-systemd"&gt;Automatically apply the configuration using systemd&lt;a class="headerlink" href="#automatically-apply-the-configuration-using-systemd" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Now, we have a script which applies a configuration, but
nothing actually runs the script. This is 
solved by using systemd services :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemd&lt;span class="o"&gt;.&lt;/span&gt;services&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;apply-mysql-conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Apply MySQL configurations&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;wants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mysql.service&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="ss"&gt;wantedBy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;multi-user.target&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="ss"&gt;serviceConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;PremissionsStartOnly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;RemainAfterExit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;ExecStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;      &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;usecaseConfScript&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;      ...&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;    &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I personally use one systemd service to apply all configurations
for the database. You may prefer using multiple systemd unit files.&lt;/p&gt;
&lt;h1 id="creating-a-nix-module"&gt;Creating a Nix module&lt;a class="headerlink" href="#creating-a-nix-module" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It is good practice to create NixOS modules as it allows
the code to be reusable and better organised.&lt;/p&gt;
&lt;p&gt;A NixOS module is created by adding &lt;code&gt;path/to/module.nix&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  lib&lt;span class="p"&gt;,&lt;/span&gt;
  config&lt;span class="p"&gt;,&lt;/span&gt;
  pkgs&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Content of the module&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More specifically the module will define a NixOS option called
&lt;code&gt;mysqlInitialConfiguration&lt;/code&gt;
so it can be used in the &lt;code&gt;configuration.nix&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  lib&lt;span class="p"&gt;,&lt;/span&gt;
  config&lt;span class="p"&gt;,&lt;/span&gt;
  pkgs&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  options&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;mysqlInitialConfiguration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;mkEnableOption &lt;span class="s2"&gt;&amp;quot;Activate initial MySQL configuration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;configurations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;mkOption&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="ss"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;        List of initial MySQL configurations&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;        For instance :&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;        [&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;          {&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            database = &amp;quot;usecase_db&amp;quot;;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            passwordFile = config.age.secrets.usecasePass.path;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            username = &amp;quot;usecase_username&amp;quot;;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            hostname = &amp;quot;usecase_hostname&amp;quot;;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;          }&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;        ]&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;      &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now this defines the NixOS option but not what happens
when it is enabled and configured. To do so we need to
add the &lt;code&gt;config&lt;/code&gt; part of the &lt;code&gt;option&lt;/code&gt; which applies a
configuration based on &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  lib&lt;span class="p"&gt;,&lt;/span&gt;
  config&lt;span class="p"&gt;,&lt;/span&gt;
  pkgs&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  options&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;mysqlInitialConfiguration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;mkEnableOption &lt;span class="s2"&gt;&amp;quot;Activate initial MySQL configuration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;configurations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;mkOption&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="ss"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;        List of initial MySQL configurations&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;        For instance :&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;        [&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;          {&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            database = &amp;quot;usecase_db&amp;quot;;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            passwordFile = config.age.secrets.usecasePass.path;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            username = &amp;quot;usecase_username&amp;quot;;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            hostname = &amp;quot;usecase_hostname&amp;quot;;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;          }&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;        ]&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;      &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="ss"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;mkIf config&lt;span class="o"&gt;.&lt;/span&gt;mysqlInitialConfiguration &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# Actual configuration&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we add the actual configuration (systemd files, scripts, &amp;hellip;)
and for practical reasons use the &lt;code&gt;let ... in ...&lt;/code&gt; nix clause.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  lib&lt;span class="p"&gt;,&lt;/span&gt;
  config&lt;span class="p"&gt;,&lt;/span&gt;
  pkgs&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt;
  &lt;span class="ss"&gt;applyMySQLConf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      database&lt;span class="p"&gt;,&lt;/span&gt;
      passwordFile&lt;span class="p"&gt;,&lt;/span&gt;
      username&lt;span class="p"&gt;,&lt;/span&gt;
      hostname&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}:&lt;/span&gt;
    pkgs&lt;span class="o"&gt;.&lt;/span&gt;writeShellScript &lt;span class="s2"&gt;&amp;quot;applyMySQLConf&amp;quot;&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;      PASSWORD=$(cat &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;passwordFile&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s s-Multiline"&gt;)&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;      &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;mariadb&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s s-Multiline"&gt;/bin/mysql -u root -e &amp;quot;GRANT ALL PRIVILEGES ON &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;database&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s s-Multiline"&gt;.* TO &amp;#39;${username}&amp;#39;@&amp;#39;${hostname}&amp;#39; IDENTIFIED BY &amp;#39;$PASSWORD&amp;#39;;&amp;quot;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;    &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Function taking a list as input and returns a string&lt;/span&gt;
  &lt;span class="ss"&gt;genSystemdScript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; list&lt;span class="p"&gt;:&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;strings&lt;span class="o"&gt;.&lt;/span&gt;concatStrings &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;conf&lt;span class="p"&gt;:&lt;/span&gt; applyMySQLConf conf &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; list&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="ss"&gt;systemdScript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;writeShellScript &lt;span class="s2"&gt;&amp;quot;mysqlInitialConfiguration&amp;quot;&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;    &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;genSystemdScript cfg&lt;span class="o"&gt;.&lt;/span&gt;configurations&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;  &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="ss"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; config&lt;span class="o"&gt;.&lt;/span&gt;mysqlInitialConfiguration&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  options&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;mysqlInitialConfiguration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="ss"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;mkIf config&lt;span class="o"&gt;.&lt;/span&gt;mysqlInitialConfiguration &lt;span class="p"&gt;{&lt;/span&gt;
    systemd&lt;span class="o"&gt;.&lt;/span&gt;services&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;mysqlInitialConfiguration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Initial MySQL configuration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;wants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mysql.service&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="ss"&gt;wantedBy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;multi-user.target&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="ss"&gt;serviceConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;PermissionsStartOnly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;RemainAfterExit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;ExecStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;systemdScript&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;config.mysqlInitialConfiguration&lt;/code&gt; is replaced with
&lt;code&gt;cfg&lt;/code&gt; in the &lt;code&gt;config&lt;/code&gt; part.&lt;/p&gt;
&lt;p&gt;Now the new option can be used in the &lt;code&gt;configuration.nix&lt;/code&gt; file
as so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="ss"&gt;imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="l"&gt;./path/to/mysql/module.nix&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  mysqlInitialConfiguration&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  mysqlInitialConfiguration&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;configurations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;passwordFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; config&lt;span class="o"&gt;.&lt;/span&gt;age&lt;span class="o"&gt;.&lt;/span&gt;secrets&lt;span class="o"&gt;.&lt;/span&gt;usecasePass&lt;span class="o"&gt;.&lt;/span&gt;path&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usecase_hostname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this article I show to apply
MySQL user configuration automatically using Nix and 
put all of this in a module.&lt;/p&gt;
&lt;p&gt;For more articles about Nix and NixOS the following 
RSS feed is available over &lt;a href="/feeds/nix.rss.xml"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="nix"></category><category term="pelican"></category><category term="nix"></category></entry><entry><title>Publishing a pelican website using nix</title><link href="https://michal.parusinski.me/publish-website-using-nix.html" rel="alternate"></link><published>2025-01-19T12:00:00+01:00</published><updated>2025-01-19T12:00:00+01:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2025-01-19:/publish-website-using-nix.html</id><summary type="html">&lt;p&gt;How to publish a static website using Nix,
specifically a website genrated with Pelican
and managed with Nix Flakes.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This website is statically generated using &lt;a href="https://getpelican.com/"&gt;pelican&lt;/a&gt; and development on the 
website is done via &lt;a href="https://nixos.wiki/wiki/Flakes"&gt;nix flakes&lt;/a&gt;. 
Here is how :&lt;/p&gt;
&lt;h1 id="overview"&gt;Overview&lt;a class="headerlink" href="#overview" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I use pelican to publish this website. Pelican is a 
python based command line tool to generate a static 
website. Pelican requires writing the articles in
reStructuredText or Markdown and placing these files
in a folder which I call &lt;code&gt;content&lt;/code&gt;. To generate
the website I simply run a command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;content&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;pelicanconf.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I will not cover the details on how to install Pelican. In the 
above command I specify the source folder &lt;code&gt;content&lt;/code&gt;,
the &lt;code&gt;output&lt;/code&gt; destination folder and finally a 
configuration file called &lt;code&gt;pelicanconf.py&lt;/code&gt; that 
contain various website information like the
name of website, the locale or the theming.&lt;/p&gt;
&lt;p&gt;While pelican is simple, it still requires a 
lot of small steps every time you want to
publish an article. Which is why I use nix
to automate as much as possible to leave
as little friction.&lt;/p&gt;
&lt;p&gt;I will explain how I use Nix flakes to manage
dependencies, build the website and run it locally.
I will leave publishing for possible future article.&lt;/p&gt;
&lt;h1 id="creating-a-development-environment-nix-shell"&gt;Creating a development environment (nix-shell)&lt;a class="headerlink" href="#creating-a-development-environment-nix-shell" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The purpose of a nix shell is to have a shell 
environment where all the tooling is installed
and one can develop various helper scripts (e.g. 
script to run the website locally).&lt;/p&gt;
&lt;p&gt;First I create the &lt;code&gt;flake.nix&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Simple blog project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:NixOS/nixpkgs/nixos-24.11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="ss"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;
        &lt;span class="ss"&gt;system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x86_64-linux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;pkgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="ss"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;python3&lt;span class="o"&gt;.&lt;/span&gt;withPackages &lt;span class="p"&gt;(&lt;/span&gt;ps&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; ps&lt;span class="o"&gt;.&lt;/span&gt;pelican ps&lt;span class="o"&gt;.&lt;/span&gt;markdown &lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        devShells&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;system&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;buildInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; deps&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically this tells how to make a shell environment
with pelican installed and markdown support. It can
be invoked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nix&lt;span class="w"&gt; &lt;/span&gt;develop
pelican&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;./content&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;./dev-output&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;pelicanconf.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this may not work for everyone
because I use an external theme.&lt;/p&gt;
&lt;p&gt;When it is not a flake project (i.e the project root does not
have a &lt;code&gt;flake.nix&lt;/code&gt;) we turn the external dependency into a
derivation &lt;em&gt;from scratch&lt;/em&gt;. This can be done
using &lt;code&gt;fetchFromGitHub&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Simple blog project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:NixOS/nixpkgs/nixos-24.11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="ss"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;
        &lt;span class="ss"&gt;system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x86_64-linux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;pkgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="ss"&gt;pelican-flex-theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;fetchFromGitHub &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;alexandrevicenzi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Flex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;sha256&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha256-I/WEqFMZbnJvX4NMeqB+o9LzD4im1BwOwgaqqDqbL2s=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="ss"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            pelican-flex-theme
            &lt;span class="p"&gt;(&lt;/span&gt;python3&lt;span class="o"&gt;.&lt;/span&gt;withPackages &lt;span class="p"&gt;(&lt;/span&gt;ps&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; ps&lt;span class="o"&gt;.&lt;/span&gt;pelican ps&lt;span class="o"&gt;.&lt;/span&gt;markdown &lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        devShells&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;system&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;buildInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; deps&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;shellHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;              export PELICAN_THEME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pelican-flex-theme&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now after running &lt;code&gt;nix develop&lt;/code&gt; I can access the 
path to the theme via the environment
variable &lt;strong&gt;PELICAN_THEME&lt;/strong&gt; (which happens to be
what I use in &lt;code&gt;pelicanconf.py&lt;/code&gt;).&lt;/p&gt;
&lt;h1 id="building-the-website"&gt;Building the website&lt;a class="headerlink" href="#building-the-website" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Next step is to implement the build step. This
is done by specifying the &lt;code&gt;packages.${system}.default&lt;/code&gt;
output derivation. Now&lt;br /&gt;
by building the website, I mean generating
the static files, not running a local instance. 
Running the website locally will be explained later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Simple blog project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:NixOS/nixpkgs/nixos-24.11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="ss"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;
        &lt;span class="ss"&gt;system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x86_64-linux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;pkgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; nixpkgs &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; system&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="ss"&gt;pelican-flex-theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;fetchFromGitHub &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;alexandrevicenzi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Flex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;sha256&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha256-I/WEqFMZbnJvX4NMeqB+o9LzD4im1BwOwgaqqDqbL2s=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="ss"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            pelican-flex-theme
            &lt;span class="p"&gt;(&lt;/span&gt;python3&lt;span class="o"&gt;.&lt;/span&gt;withPackages &lt;span class="p"&gt;(&lt;/span&gt;ps&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; ps&lt;span class="o"&gt;.&lt;/span&gt;pelican ps&lt;span class="o"&gt;.&lt;/span&gt;markdown &lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        devShells&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;system&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;buildInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; deps&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;shellHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;              export PELICAN_THEME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pelican-flex-theme&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        packages&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;system&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;stdenv&lt;span class="o"&gt;.&lt;/span&gt;mkDerivation &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my-website&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;./.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;nativeBuildInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; deps&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;buildPhase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                export PELICAN_THEME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pelican-flex-theme&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                pelican content -o output -s pelicanconf.py&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;installPhase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                mkdir -p $out&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                cp -r output/* $out&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just like a Makefile we specify how to &lt;em&gt;build&lt;/em&gt; 
the project using the &lt;code&gt;buildPhase&lt;/code&gt; and
how to install using the &lt;code&gt;installPhase&lt;/code&gt;; all
of this within &lt;code&gt;stdenv.mkDerivation&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;There is however one problem with this derivation.
It fetches all the files instead of only the 
files it needs. To fix this I use
&lt;a href="https://github.com/hercules-ci/gitignore.nix"&gt;gitignore.nix&lt;/a&gt;
which filters the source folder using the .gitignore file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Simple blog project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:NixOS/nixpkgs/nixos-24.11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;gitignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:hercules-ci/gitignore.nix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            inputs&lt;span class="o"&gt;.&lt;/span&gt;nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;follows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nixpkgs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="ss"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; gitignore &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;
        &lt;span class="c1"&gt;# ... previous code omitted ...&lt;/span&gt;
        &lt;span class="ss"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            pelican-flex-theme
            &lt;span class="p"&gt;(&lt;/span&gt;python3&lt;span class="o"&gt;.&lt;/span&gt;withPackages &lt;span class="p"&gt;(&lt;/span&gt;ps&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; ps&lt;span class="o"&gt;.&lt;/span&gt;pelican ps&lt;span class="o"&gt;.&lt;/span&gt;markdown &lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;gitignore&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="p"&gt;)&lt;/span&gt; gitignoreSource&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# ... previous code omitted ...&lt;/span&gt;
        packages&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;system&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;stdenv&lt;span class="o"&gt;.&lt;/span&gt;mkDerivation &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my-website&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gitignoreSource &lt;span class="l"&gt;./.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;nativeBuildInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; deps&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;buildPhase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                export PELICAN_THEME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pelican-flex-theme&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                pelican content -o output -s pelicanconf.py&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;installPhase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                mkdir -p $out&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                cp -r output/* $out&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can build the website by running the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nix&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can access the website in the &lt;code&gt;result&lt;/code&gt; folder (which
is a link to the created derivation in the nix store).&lt;/p&gt;
&lt;h1 id="launching-the-website-locally"&gt;Launching the website locally&lt;a class="headerlink" href="#launching-the-website-locally" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To run the locally we define an application in 
the Nix flake file. To run the website locally will be done in three
steps :
1. Create a shell script to run the website (using
nix of course)
2. Define an application in &lt;code&gt;flake.nix&lt;/code&gt;
3. Make the shell script and the package a
dependency of the application&lt;/p&gt;
&lt;p&gt;Here is how it is done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ... inputs ...&lt;/span&gt;
    &lt;span class="ss"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; self&lt;span class="p"&gt;,&lt;/span&gt; nixpkgs&lt;span class="p"&gt;,&lt;/span&gt; gitignore &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;
        &lt;span class="c1"&gt;# ... previous code omitted ...&lt;/span&gt;
        &lt;span class="ss"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            pelican-flex-theme
            &lt;span class="p"&gt;(&lt;/span&gt;python3&lt;span class="o"&gt;.&lt;/span&gt;withPackages &lt;span class="p"&gt;(&lt;/span&gt;ps&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; ps&lt;span class="o"&gt;.&lt;/span&gt;pelican ps&lt;span class="o"&gt;.&lt;/span&gt;markdown &lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;gitignore&lt;span class="o"&gt;.&lt;/span&gt;lib&lt;span class="p"&gt;)&lt;/span&gt; gitignoreSource&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;static-website&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;stdenv&lt;span class="o"&gt;.&lt;/span&gt;mkDerivation &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my-website&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gitignoreSource &lt;span class="l"&gt;./.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;nativeBuildInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; deps&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;buildPhase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                export PELICAN_THEME=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pelican-flex-theme&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                pelican content -o output -s pelicanconf.py&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;installPhase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                mkdir -p $out&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                cp -r output/* $out&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;            &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# ... previous code omitted ...&lt;/span&gt;
        packages&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;system&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; static-website&lt;span class="p"&gt;;&lt;/span&gt;
        apps&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;system&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;
            &lt;span class="ss"&gt;serv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;writeShellApplication &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="ss"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;serve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="ss"&gt;runtimeInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; static-website &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; deps&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="ss"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Multiline"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                    pelican --relative-urls -p 8080 -l &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;static-website&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s s-Multiline"&gt;                &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="ss"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;serv&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/bin/serve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code we refactor the code by moving the package
definition into the &lt;code&gt;static-website&lt;/code&gt; variable in the 
&lt;code&gt;let ... in ...&lt;/code&gt; clause. We also create a subcomponent as
a shell application derivation called &lt;code&gt;serv&lt;/code&gt; which 
simply run the pelican local server.&lt;/p&gt;
&lt;p&gt;To run the website locally simply do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nix&lt;span class="w"&gt; &lt;/span&gt;run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="resulting_image" src="images/pelican-flake-static-website.png" /&gt;&lt;/p&gt;
&lt;h2 id="updating-the-website"&gt;Updating the website&lt;a class="headerlink" href="#updating-the-website" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now if you make changes to your website (e.g. add a new
article markdown file) you may not see the changes
after running &lt;code&gt;nix run&lt;/code&gt; or &lt;code&gt;nix build&lt;/code&gt;, the most
likely reason for this is that flakes track the
latest state of the git repository; meaning
you may need to &lt;code&gt;git add&lt;/code&gt; files for changes to 
be reflected.&lt;/p&gt;
&lt;h1 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this article I show how to use Nix flakes
to manage the development life-cycle of a 
statically generated website using pelican.&lt;/p&gt;
&lt;p&gt;Nix flakes are used to manage the development 
environment (like virtual environments in Python),
build the website (like in &lt;code&gt;make build&lt;/code&gt;) and run the
website locally (like a &lt;code&gt;docker run&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For more articles about Nix and NixOS the following 
RSS feed is available over &lt;a href="/feeds/nix.rss.xml"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="nix"></category><category term="pelican"></category><category term="nix"></category></entry><entry><title>Managing secrets in Nix using Agenix</title><link href="https://michal.parusinski.me/managin-secrets-in-nix-using-agenix.html" rel="alternate"></link><published>2024-10-25T21:26:00+02:00</published><updated>2024-10-25T21:26:00+02:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2024-10-25:/managin-secrets-in-nix-using-agenix.html</id><summary type="html">&lt;p&gt;How to manage secrets in a Nix configuration
using Agenix, a tool built on top of the
&lt;code&gt;age&lt;/code&gt; encryption tool.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If tomorrow my laptop were to go in flames, I would lose two things.
First I would lose my data, and this is what backups are for. The
second thing I would lose is my configuration (software installed,
network setup, &amp;hellip;). Nix offers a way to perserve this (assuming 
the configuration is replicated externally like GitHub).&lt;/p&gt;
&lt;p&gt;But storing one&amp;rsquo;s configuration is Nix comes with challenges. One of those 
challenges is how to handle secrets. Some parts of the configuration
is tied to secrets : passwords, keys, API tokens, &amp;hellip; . The question
is how to manage this. Usually it requires some form of cryptography.&lt;/p&gt;
&lt;h1 id="how-i-store-my-nix-configuration"&gt;How I store my nix configuration&lt;a class="headerlink" href="#how-i-store-my-nix-configuration" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Before I explain Agenix, I think it is worth to explain how I manage
my Nix configuration on the various machines I have installed Nix.
This is because Agenix integrates to my nix configuration, and
Agenix makes more sense in context.&lt;/p&gt;
&lt;p&gt;There is the file layout of my Nix configuration over at (GitHub)[https://github.com/mparusinski/nix-config/]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├──&lt;span class="w"&gt; &lt;/span&gt;build.sh
├──&lt;span class="w"&gt; &lt;/span&gt;flake.lock
├──&lt;span class="w"&gt; &lt;/span&gt;flake.nix
├──&lt;span class="w"&gt; &lt;/span&gt;modules
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;nixos
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;users.nix&lt;span class="w"&gt; &lt;/span&gt;
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;...
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;gc.nix
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;home-manager
│&lt;span class="w"&gt;       &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;git.nix
│&lt;span class="w"&gt;       &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;...
│&lt;span class="w"&gt;       &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;zsh.nix
└──&lt;span class="w"&gt; &lt;/span&gt;hosts
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;dell-precision-7530
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;configuration.nix
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;hardware-configuration.nix
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;home.nix
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;wsl1
&lt;span class="w"&gt;        &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;configuration.nix
&lt;span class="w"&gt;        &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;home.nix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(The layout is inspired from &amp;hellip;) TODO: Find source&lt;/p&gt;
&lt;p&gt;There are two parts each divided into two subparts :
* The build system build on top of Nix and Flakes
    * &lt;code&gt;flake.nix&lt;/code&gt; and &lt;code&gt;flake.lock&lt;/code&gt; describe how to build a nix configuration on a given system.
    * &lt;code&gt;build.sh&lt;/code&gt; which launches the appropriate Nix build command for the underlying system.
* Nix modules which defines the system configuration
    * &lt;code&gt;modules&lt;/code&gt; defines reusable configuration code across various systems
    * &lt;code&gt;hosts&lt;/code&gt; defines configuration for given systems.&lt;/p&gt;
&lt;p&gt;Naively secrets (passwords, keys, API tokens, &amp;hellip;) would be stored in plain text somewhere
in the files mentionned here.&lt;/p&gt;
&lt;h1 id="agenix-explained"&gt;Agenix explained&lt;a class="headerlink" href="#agenix-explained" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To include secrets safely in a Git repository storing configuration there are multiple options.
A common choice to externalize secrets. Essentially storing them not in Git. That could be 
simple files one has to place manually, key vaults, etc. But in that case you can&amp;rsquo;t simply 
replicate configuration unless you maintain those secrets. Another choice is to encrypt the
secrets before hand, and, it has to be said, making sure the encryption key does not end up in Git.&lt;/p&gt;
&lt;p&gt;Agenix offers a way to include those secrets encrypted in Git. Furthermore Agenix is aware
of actors involved. By actors I mean the repository maintainer, i.e. you, the systems that
will have to decrypt the secrets, &amp;hellip;&lt;/p&gt;
&lt;p&gt;Agenix is build on top of &lt;a href="https://github.com/FiloSottile/age"&gt;age&lt;/a&gt; which is an encryption tool.
Its particularity is Age encrypted secrets can have multiple recipients and can use SSH
asymetric encryption (a key for encryption, a key for decryption). Agenix uses &lt;code&gt;age&lt;/code&gt; to make
the secret decryptable by authorized actors : you and the systems (which have their own 
SSH keys) that need to access the secrets and no one else.&lt;/p&gt;
&lt;p&gt;To be used Agenix needs to be installed to encrypt secrets but you also need to 
specify the nix configuration to setup agenix (so it can manage secrets) which
amount of having it installed, the secrets specified and when to use them.&lt;/p&gt;
&lt;h1 id="managing-secrets"&gt;Managing secrets&lt;a class="headerlink" href="#managing-secrets" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The first step is to install Nix. In my case I am using flakes so I followed
the steps from &lt;a href="https://github.com/ryantm/agenix?tab=readme-ov-file#install-module-via-flakes"&gt;install guide for flakes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So more details about using flakes for your NixOS configuration see this &lt;a href="https://nixos-and-flakes.thiscute.world/nixos-with-flakes/nixos-with-flakes-enabled"&gt;link&lt;/a&gt;
If you want to pass agenix to your configuration module file (usually named &lt;code&gt;configuration.nix&lt;/code&gt;) 
you need to specify the &lt;code&gt;specialArgs = { inherit inputs; }&lt;/code&gt; option when calling 
&lt;code&gt;nixpkgs.lib.nixosSystem&lt;/code&gt;. To check if agenix is correctly installed run &lt;code&gt;agenix -h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now that agenix is installed the next step is to setup secrets. Inside your
nix configuration folder do the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;secrets
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;secrets
touch&lt;span class="w"&gt; &lt;/span&gt;secrets.nix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means that the &lt;code&gt;secrets.nix&lt;/code&gt; file will be version controlled. And start 
editing the &lt;code&gt;secrets.nix&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt;
  &lt;span class="c1"&gt;# SSH public keys of the users who will be adding secrets through agenix&lt;/span&gt;
  &lt;span class="ss"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJCizmOo5KevfHd6pqwxVjgvVYWv4Az5TbAclvuhF2AC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; john &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;# SSH public keys of the systems who will need to access the secrets&lt;/span&gt;
  &lt;span class="ss"&gt;webserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDA1+TbC/tXsVAKUjSzipoC0ibOgSWuNvzVdb8Xxwi0T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;systems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; webserver &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# Specify for each secret who has access to it&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;apikey.age&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;publicKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; users &lt;span class="o"&gt;++&lt;/span&gt; systems&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once this is done you can create the secret files. In the above example that would 
&lt;code&gt;agenix -e apikey.age&lt;/code&gt;. This file contains the encrypted secret to be used.&lt;/p&gt;
&lt;p&gt;Once you have done you will need to specify the secrets twice in the configuration nix
files: once to declare the secret with the location of the age encrypted file, the
second time to link the secret to some configuration item.&lt;/p&gt;
&lt;p&gt;```nix
{   # configuration.nix
    &amp;hellip;
    age.secrets.apikey.file = relativepathto/secrets/apikey.age; 
    &amp;hellip;
    # some service requiring the above secret
    services.special.config.adminFile = config.age.secrets.apikey.path;
}&lt;/p&gt;
&lt;h1 id="limitations"&gt;Limitations&lt;a class="headerlink" href="#limitations" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;From my experience sometimes Agenix does not always work smoothly with
Nix. For instance in one case the nix build system would invalidate
a prometheus configuration because the Agenix path would not exist &lt;strong&gt;yet&lt;/strong&gt;.
This had to with the prometheus Nix module validating the generate configuration
yaml (see &lt;a href="https://mynixos.com/nixpkgs/option/services.prometheus.checkConfig"&gt;here&lt;/a&gt;).&lt;/p&gt;</content><category term="nix"></category><category term="linux"></category><category term="nix"></category><category term="security"></category></entry><entry><title>Converting Archlinux with BTRFS into NixOS</title><link href="https://michal.parusinski.me/arch-btrfs-into-nixos.html" rel="alternate"></link><published>2024-08-24T11:39:00+02:00</published><updated>2025-03-01T14:04:00+01:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2024-08-24:/arch-btrfs-into-nixos.html</id><summary type="html">&lt;p&gt;How to convert an Arch Linux system using a Btrfs filesystem into a NixOS
system without reformatting or using a USB live distro.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I have converted my laptop from Archlinux into NixOS without
reformatting or plugging a USB live distro and kept my home partition as is.
This was done from the existing Archlinux install.&lt;/p&gt;
&lt;p&gt;The former system was installed on top a BTRFS root subvolume. I use that to my 
advantage. These steps are for NixOS specifically but in principle could be
done with other distributions.&lt;/p&gt;
&lt;h2 id="former-setup"&gt;Former setup&lt;a class="headerlink" href="#former-setup" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The former setup is Arch installed on top of BTRFS with full disk encryption
with systemd-boot (on EFI). Two subvolumes were used : &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;home&lt;/code&gt; used
respectively for &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/home/&lt;/code&gt;. The layout can be summarized by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;lsblk
NAME&lt;span class="w"&gt;         &lt;/span&gt;MAJ:MIN&lt;span class="w"&gt; &lt;/span&gt;RM&lt;span class="w"&gt;   &lt;/span&gt;SIZE&lt;span class="w"&gt; &lt;/span&gt;RO&lt;span class="w"&gt; &lt;/span&gt;TYPE&lt;span class="w"&gt;  &lt;/span&gt;MOUNTPOINTS
zram0&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;:0&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;8G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;disk&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;SWAP&lt;span class="o"&gt;]&lt;/span&gt;
nvme0n1&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;259&lt;/span&gt;:0&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;,9G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;disk&lt;span class="w"&gt;  &lt;/span&gt;
├─nvme0n1p1&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;259&lt;/span&gt;:1&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;512M&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;part&lt;span class="w"&gt;  &lt;/span&gt;/boot
└─nvme0n1p2&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;259&lt;/span&gt;:2&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;,4G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;part&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;└─cryptdev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;254&lt;/span&gt;:0&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;,4G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;crypt&lt;span class="w"&gt; &lt;/span&gt;/home
&lt;span class="w"&gt;                                        &lt;/span&gt;/
$&lt;span class="w"&gt; &lt;/span&gt;btrfs&lt;span class="w"&gt; &lt;/span&gt;subvolume&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;/
ID&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gen&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2394&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;top&lt;span class="w"&gt; &lt;/span&gt;level&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;path&lt;span class="w"&gt; &lt;/span&gt;root
ID&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;257&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gen&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2394&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;top&lt;span class="w"&gt; &lt;/span&gt;level&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;path&lt;span class="w"&gt; &lt;/span&gt;home
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;some&lt;span class="w"&gt; &lt;/span&gt;lines&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;omitted&lt;span class="w"&gt; &lt;/span&gt;here&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The goal will be to create a new &lt;code&gt;root&lt;/code&gt; subvolume for NixOS called &lt;code&gt;nixos_root&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="installing-nixos-tools"&gt;Installing NixOS tools&lt;a class="headerlink" href="#installing-nixos-tools" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First we need to get nix tools, this is done by installing nix the normal way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sh&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;https://nixos.org/nix/install&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--daemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Reopen the shell and install NixOS installation tools.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;nix-channel&lt;span class="w"&gt; &lt;/span&gt;--add&lt;span class="w"&gt; &lt;/span&gt;https://nixos.org/channels/nixos-24.05&lt;span class="w"&gt; &lt;/span&gt;nixpkgs
$&lt;span class="w"&gt; &lt;/span&gt;nix-env&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;nixpkgs&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-iA&lt;span class="w"&gt; &lt;/span&gt;nixos-install-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="prepare-environment"&gt;Prepare environment&lt;a class="headerlink" href="#prepare-environment" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like a regular CLI install we are going to prepare &lt;code&gt;/mnt/&lt;/code&gt; to host 
the future system (which happens to be on the same disk as the current
system). Please adapt the following steps to your disk layout :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;mount&lt;span class="w"&gt; &lt;/span&gt;/dev/mapper/cryptdev&lt;span class="w"&gt; &lt;/span&gt;/btr_pool&lt;span class="w"&gt; &lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;btrfs&lt;span class="w"&gt; &lt;/span&gt;subvolume&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;/btr_pool/nixos_root
$&lt;span class="w"&gt; &lt;/span&gt;mount&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;subvol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nixos_root,compress&lt;span class="o"&gt;=&lt;/span&gt;zstd,ssd,space_cache&lt;span class="o"&gt;=&lt;/span&gt;v2,noatime&lt;span class="w"&gt; &lt;/span&gt;/dev/mapper/cryptdev&lt;span class="w"&gt; &lt;/span&gt;/mnt
$&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;/mnt/home&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mount&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;subvol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;home,compress&lt;span class="o"&gt;=&lt;/span&gt;zstd,ssd,space_cache&lt;span class="o"&gt;=&lt;/span&gt;v2,noatime&lt;span class="w"&gt; &lt;/span&gt;/dev/mapper/cryptdev&lt;span class="w"&gt; &lt;/span&gt;/mnt/home
$&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;/mnt/boot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mount&lt;span class="w"&gt; &lt;/span&gt;/dev/nvme0n1p1&lt;span class="w"&gt; &lt;/span&gt;/mnt/boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="install-nixos"&gt;Install NixOS&lt;a class="headerlink" href="#install-nixos" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First prepare the NixOS configuration files:
* &lt;code&gt;/mnt/etc/nixos/hardware-configuration.nix&lt;/code&gt;
* &lt;code&gt;/mnt/etc/nixos/configuration.nix&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is almost identical to a regular install of NixOS from an live NixOS 
environment. It just requires some path modification.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;NIX_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NIX_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;nixos-install&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--root&lt;span class="w"&gt; &lt;/span&gt;/mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can now reboot to the new system. I had to run from the NixOS a command to make nix commands work. Basically
update the channel files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$nix&lt;/span&gt;-channel&lt;span class="w"&gt; &lt;/span&gt;--update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In principle at boot time you should
be able to choose between the old system (Archlinux) and the new system (NixOS).
If you do keep both systems keep in mind NixOS might modify the location of 
files like &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt;</content><category term="nix"></category><category term="linux"></category><category term="nix"></category><category term="btrfs"></category></entry><entry><title>Converting docker containers into AppImages</title><link href="https://michal.parusinski.me/converting-docker-containers-into-appimages.html" rel="alternate"></link><published>2022-09-03T16:00:00+02:00</published><updated>2022-09-03T16:00:00+02:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2022-09-03:/converting-docker-containers-into-appimages.html</id><summary type="html">&lt;p&gt;In Linux, software is conventionally distributed through packages, usually compressed folders including
executables, installations scripts and various configuration files. These packaging formats come in various
flavors like deb packages, RPMs, and many others. While very useful, these packaging formats have a downside:
they are distribution specific. Even if two distributions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Linux, software is conventionally distributed through packages, usually compressed folders including
executables, installations scripts and various configuration files. These packaging formats come in various
flavors like deb packages, RPMs, and many others. While very useful, these packaging formats have a downside:
they are distribution specific. Even if two distributions use the same packaging format, like say Ubuntu
and Debian, they are not compatible. Meaning that a deb package built for debian is not expected to work on
Ubuntu and vice-versa. In goes even further, packages may not be compatible between two different releases
of the same Linux distribution, for instance Debian stable and Debian unstable. The main consequence
of this limitation is that software needs to be built for every combintations of Linux distribution / releases
out there.&lt;/p&gt;
&lt;p&gt;For simple open source software this isn't usually a big issue, as volunteers can usually take the code
and release it for the distribution of their choice making small adjustments to the code (at least in
principle). For more complicated software and proprietary software this is trickier. However
there is a solution to this problem: recently new
universal, meaning distribution agnostic, packaging formats have been created. The main ones are Flatpak, Snaps
and AppImage. But there are many others, technically Docker is also a means to distributed software (usually
server-side software) on many Linux distributions (as well as Windows). Steam distributables can also be counted, if you
think about it. And even Nix packages are in some way distribution agnostic as you can install Nix
on many Linux distributions.&lt;/p&gt;
&lt;p&gt;I personally think AppImage lacks a little bit of love. It does not offer as many features as Flatpak or Snaps, which
handle sandboxing, software distribution, and sharing frameworks, but it is very simple and easy to grasp.
AppImages is already fairly popular amongst QT applications, electron applications, and some games like OpenRA.
By the way that is no coincidence, among the tools to build appimages, some are specifically tailored
for QT applications and electron applications. This, in my view, creates a disparity, so I wondered
if I can make a difference. So I decided to create another tool to create AppImages, but from Docker
containers, a tool I am familiar with. Furthermore the creation of Docker images and containers is very
well documented and the collection of publically available Docker images is very large.
The tool's name &lt;cite&gt;docker2appimage&lt;/cite&gt; available on Github at &lt;a class="reference external" href="https://github.com/mparusinski/docker2appimage"&gt;https://github.com/mparusinski/docker2appimage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have a container called &lt;cite&gt;relaxed_beaver&lt;/cite&gt;, to create an AppImage which triggers the container default
command, you run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker2appimage&lt;span class="w"&gt; &lt;/span&gt;relaxed_beaver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can perform more complex tasks like request &lt;cite&gt;docker2appimage&lt;/cite&gt; to create a container from the
alpine Docker image and create a container that calls &lt;cite&gt;ls&lt;/cite&gt; and give the AppImage the name &lt;cite&gt;alpine-ls&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker2appimage&lt;span class="w"&gt; &lt;/span&gt;-x&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;alpine-ls&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;alpine
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to work the tool requires the &lt;cite&gt;appimagetool&lt;/cite&gt; AppImage to be accessible on the path as well
&lt;cite&gt;imagemagick&lt;/cite&gt; to be installed on the system. The entire tool is a simple shell script for it is designed
to be portable.&lt;/p&gt;
&lt;p&gt;Here is an even more complex example where we create an universal binary for ripgrep a popular alternative for
grep&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="o"&gt;=&lt;/span&gt;ripgrep&lt;span class="w"&gt; &lt;/span&gt;ubuntu&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Creates a container called neofetch&lt;/span&gt;
apt-get&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;ripgrep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Command within the container&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Leave the container&lt;/span&gt;
docker2appimage&lt;span class="w"&gt; &lt;/span&gt;-x&lt;span class="w"&gt; &lt;/span&gt;rg&lt;span class="w"&gt; &lt;/span&gt;ripgrep
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last commmand creates an AppImage called neofetch from container neofetch which launches neofetch&lt;/p&gt;
&lt;p&gt;Most Docker images are server side software (e.g. nginx), OS containers (e.g. alpine) and programming
frameworks. Naturally &lt;cite&gt;docker2appimage&lt;/cite&gt; will fit well to create CLI only AppImage. This is not what
AppImage are usually intended, they are usually intended for Desktop applications. It is still possible
to create GUI applications, and there is a case for CLI AppImages as a replacement for statically compiled
binaries. In other words this offers an approach for portable CLI applications.&lt;/p&gt;
&lt;p&gt;There are some limitations of course. Many Docker images default commands are shells like bash, sh, ...
one might even include Python as a type of shell. AppImage works by doing tricks with environment variables
and Fuse to create a pseudo virtual environment where a command is launched from within the AppImage.
This makes handling shell commands trickier, so it is not supported, instead it is better to use
the &lt;cite&gt;-x&lt;/cite&gt; flag that allows the user to specify the command to launch.&lt;/p&gt;
&lt;p&gt;The project is still ongoing development to support many applications and Linux distributions.
If you have some time and are curious do not hesitate to test the tool and report any bugs you see.&lt;/p&gt;
</content><category term="Linux, packaging, AppImage, Docker"></category></entry><entry><title>Pixel Pal (PART 6) : Early progress reports</title><link href="https://michal.parusinski.me/pixel-pal-progress.html" rel="alternate"></link><published>2021-05-07T23:59:00+02:00</published><updated>2021-05-07T23:59:00+02:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2021-05-07:/pixel-pal-progress.html</id><summary type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to resample them by the desired factor,
but the icons look pixelated.&lt;/p&gt;
&lt;p&gt;Here is a link to a &lt;a class="reference external" href="https://michal.parusinski.me/pdfs/report_progress_20200507.pdf"&gt;PDF&lt;/a&gt; showing progress in the project.
The PDF showcases various models performing data augmentation. The results are still blurry&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="35%" /&gt;
&lt;col width="32%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;32 x 32 pixel version of the icon&lt;/th&gt;
&lt;th class="head"&gt;32x32 augmented with one of the models&lt;/th&gt;
&lt;th class="head"&gt;64x64 pixels version of the icon&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="32 by 32 pixels version of the icon" src="https://michal.parusinski.me/images/pixelpal-example1-icon-32x32.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="32 by 32 pixel augmented with neural network" src="https://michal.parusinski.me/images/pixelpal-example1-icon-augmented.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="64 by 64 pixels version of the icon" src="https://michal.parusinski.me/images/pixelpal-example1-icon-64x64.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Linux, HiDPI, PixelPal"></category></entry><entry><title>Pixel Pal (PART 5) : Data augmentation</title><link href="https://michal.parusinski.me/pixel-pal-data-augmentation.html" rel="alternate"></link><published>2020-04-25T14:18:00+02:00</published><updated>2020-04-25T14:18:00+02:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2020-04-25:/pixel-pal-data-augmentation.html</id><summary type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to resample them by the desired factor,
but the icons look pixelated. The goal of this project is to use deep learning
to upsample small icons into icons for HiDPI screens.&lt;/p&gt;
&lt;p&gt;This is the fifth article about this project. Here are the other four:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-adapting-old-icon-themes-for-hidpi-screens.html"&gt;Part #1 Explaining the project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-gathering-data.html"&gt;Part #2 Building the dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-metrics.html"&gt;Part #3 Measuring model quality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-training.html"&gt;Part #4 Training models&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of the big challenges in deep learning is getting enough data. Neural networks can easily
have millions of parameters and it requires large quantity of data to fine tune these
parameters. Getting enough data is a challenge but what makes it worse that data itself
is not sufficient, you need labelled data, and if possible quality labelled data.&lt;/p&gt;
&lt;p&gt;When you don't have enough data you have a problem. There are many ways to tackle this issues:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Reducing the number of parameters to learn. One such way is to resuse the weights (parameters) from an already learned task and then only retrain parts of the model. This is a form of transfer learning. For instance VGG-16 is taught to do image classification for general public purpose. You can take this model and only retrain parts of it, assuming the other parts are good enough to generalise to your task.&lt;/li&gt;
&lt;li&gt;Training parts of the model on the input data alone using autoencoders. This is fairly technical. The idea is that you build a model which compresses the input data and then decompress the data back with no loss of quality. Such a model is easier to train as you usually have lots of input data (but not necessarily output data). Then you use the trained autoencoder and you split in two : the compression network and the decompression network. You can then work with the compressed features coming out of the compression network as a replacement of the original input data. The benefit here is that the compressed features are smaller and as a result the network you need to train mapping the compressed features to the output data is smaller and thus simpler to teach.&lt;/li&gt;
&lt;li&gt;Use data augmentation. This method consists of building new data from the currently existing one. This method is especially good as a way to produce neural network that generalise well. Through data augmentation you can tell what a neural network should not rely on. For instance one way to augment image data is to flip the image horizontally and vertically, this way you can easily quadruple the amount of data available and tell the network it should be not rely on the image on being a certain way like having shadows at the bottom.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the purpose of this project I will rely on data augmentation. My training data set is around 9 000 images, which
is fairly good for networks having 10 of thousands of parameters. But through data augmentation my neural network
can be better and by simply flipping horizontally and vertically I can easily get around 36 000 images. Thus allowing
me to investigate deeper neural networks.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="11%" /&gt;
&lt;col width="40%" /&gt;
&lt;col width="49%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;modification&lt;/th&gt;
&lt;th class="head"&gt;no horizontal flip&lt;/th&gt;
&lt;th class="head"&gt;horizontal flip&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;no vertical flip&lt;/td&gt;
&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="original image" src="https://michal.parusinski.me/images/pixel-augmentation-original.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="horizontal flip" src="https://michal.parusinski.me/images/pixel-augmentation-horizontal-flip.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;vertical flip&lt;/td&gt;
&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="vertical flip" src="https://michal.parusinski.me/images/pixel-augmentation-vertical-flip.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="horizontal and vertical flip" src="https://michal.parusinski.me/images/pixel-augmentation-horizontal-and-vertical-flip.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Linux, HiDPI, PixelPal"></category></entry><entry><title>Pixel Pal (PART 4) : Training a model</title><link href="https://michal.parusinski.me/pixel-pal-training.html" rel="alternate"></link><published>2020-04-19T14:41:00+02:00</published><updated>2020-04-19T14:41:00+02:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2020-04-19:/pixel-pal-training.html</id><summary type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to resample them by the desired factor,
but the icons look pixelated. The goal of this project is to use deep learning
to upsample small icons into icons for HiDPI screens.&lt;/p&gt;
&lt;p&gt;This is the fourth article about this project. Here are the other three:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-adapting-old-icon-themes-for-hidpi-screens.html"&gt;Part #1 Explaining the project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-gathering-data.html"&gt;Part #2 Building the dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-metrics.html"&gt;Part #3 Measuring model quality&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this part I will be training models. To build and train models I will use _Tensorflow: &lt;a class="reference external" href="https://www.tensorflow.org/"&gt;https://www.tensorflow.org/&lt;/a&gt; and _Keras: &lt;a class="reference external" href="https://keras.io/"&gt;https://keras.io/&lt;/a&gt;.
Tensorflow and keras are at this point the industry standard for neural networks in Python. I won't explain how to train networks in
Keras there is already a lot of documentation on how to do this. In this section I want to talk about a couple of important things to
do when training to avoid wasting time (training well is time consuming):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Output metrics during learning not just the loss to visualise the learning live.&lt;/li&gt;
&lt;li&gt;Use a validation dataset to measure the progress of learning on a dataset which is different from the training dataset. The point is to  see the real progress of the learning and spot early issues like overfitting (or learning too fast).&lt;/li&gt;
&lt;li&gt;Use a early stopping callback : This will check the progress of the validation metrics and stop the learning if the training algorithm is no longer learning. This helps avoid of leaving the training algorithm going on for nothing.&lt;/li&gt;
&lt;li&gt;Use checkpoints : This will save the model regularly and if your training crashes you can restart from where you left.&lt;/li&gt;
&lt;li&gt;Regularly save the output (as an image) of the neural network on fixed image inputs. This helps you visualise the progress of the learning.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Linux, HiDPI, PixelPal"></category></entry><entry><title>Pixel Pal (PART 3) : Measuring model quality</title><link href="https://michal.parusinski.me/pixel-pal-metrics.html" rel="alternate"></link><published>2020-04-11T15:29:00+02:00</published><updated>2020-04-11T15:29:00+02:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2020-04-11:/pixel-pal-metrics.html</id><summary type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to resample them by the desired factor,
but the icons look pixelated.&lt;/p&gt;
&lt;p&gt;This is the third article about this project. Here are the other two:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-adapting-old-icon-themes-for-hidpi-screens.html"&gt;Part #1 Explaining the project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michal.parusinski.me/pixel-pal-gathering-data.html"&gt;Part #2 Building the dataset&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this part I will be talking about losses, metrics and targets. Before going on about training
deep learning networks to up sample intelligently icon images, we need
ways to measure if our models are doing a good job. Especially we need
to know if a model does better than simply pixel doubling.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;32x32 pixels version of the icon up sampled (pixel doubling)&lt;/th&gt;
&lt;th class="head"&gt;64x64 pixels version of the icon&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="32 by 32 pixels version of the icon" src="https://michal.parusinski.me/images/pixelpal-example1-icon-32x32.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;&lt;div class="first last figure"&gt;
&lt;img alt="64 by 64 pixels version of the icon" src="https://michal.parusinski.me/images/pixelpal-example1-icon-64x64.png" /&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The images above show side by side the same vector icon but the left icon was rasterized as a 32 by 32 pixels image and
the right icon was rasterized as a 64 by 64 pixels. Furthermore the 32 by 32 pixels was up sampled (simple pixel doubling)&lt;/p&gt;
&lt;p&gt;As you can see the two images are similar but not identical. We need some way to measure how similar the two are.
Simple counting the number of identical pixels is problematic. Because two pixels aren't identical does not mean they are
not similar. Counting the number of identical pixels as a metric will probably be too critical. So for this project
I will rely on two metrics suggested in the following article : &lt;a class="reference external" href="https://medium.com/beyondminds/an-introduction-to-super-resolution-using-deep-learning-f60aff9a499d"&gt;An Introduction to Super Resolution using Deep Learning&lt;/a&gt;.
The metrics in question are the following :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio"&gt;Peak Signal to Noise Ratio (PSNR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Structural_similarity"&gt;Structural Similarity (SSIM)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For information the metrics for the pair of images above are :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Peak Signal to Noise Ratio: 16.913143157958984&lt;/li&gt;
&lt;li&gt;Structural Similarity     : 0.8310688138008118&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Measuring how similar two images are is already a good element. It provides us an idea of how well
our models are working. However there are some limits to metrics:&lt;/p&gt;
&lt;p&gt;1. Metrics are not always differentiable. However training neural networks require a way to measure
the distance between the wanted output and the output the network is producing. This is where &lt;em&gt;losses&lt;/em&gt;
come into play.
2. You need to have some good baselines. In other words the metric in itself is not useful, you need
to have an objectif. Something like do better than simple pixel doubling or bicubic interpolation.
3. Metrics will be sensitive to the data you use. You may land on images that are easy to upsample
and the metric may be deceptively good. This is why you should compute the metrics on the entire
dataset and do some statistics on it.
4. Metrics are not perfect. In the end we want something to be visually pleasing not something that
maximise a mathematical function. This is why you should also visually look at the result of the
neural networks.&lt;/p&gt;
&lt;p&gt;To train the network will use a loss function. Loss function are ways to measure the distance
between the ideal output and the current output. In our case we will use mean squared error as
it is simple and fits our purpose. In general always make sure you are using an appropriate
loss function.&lt;/p&gt;
&lt;p&gt;In terms of baselines my objectif will be to perform better thant straight upsampling via
nearest and bilinear interpolation.&lt;/p&gt;
</content><category term="Linux, HiDPI, PixelPal"></category></entry><entry><title>Pixel Pal (PART 2) : Gathering data for Pixel Pal</title><link href="https://michal.parusinski.me/pixel-pal-gathering-data.html" rel="alternate"></link><published>2020-02-15T10:24:00+01:00</published><updated>2020-02-15T10:24:00+01:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2020-02-15:/pixel-pal-gathering-data.html</id><summary type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pixel Pal is a project I have started whose purpose is to bring new life to
old icon themes. Many old icon themes are in raster format and are not
available for HiDPI screens (their resolution are too small). Currently the
only way to handle old icon themes is to resample them by the desired factor,
but the icons look pixelated. The goal of this project is to use deep learning
to upsample small icons into icons for HiDPI screens.&lt;/p&gt;
&lt;p&gt;To solve this I will use artificial intelligence and more precisely deep
learning. The idea is to teach a neural network how to upsample icons in a
manner that takes into account the shape of the underlying icon. In other
words the idea is to do better than increasing the number of pixels. However
to teach a neural network you need lots of data. In our case the data is a
collection of icons for which we have both low resolution and HiDPI resolution
versions.&lt;/p&gt;
&lt;p&gt;Thankfully due to open source a lot of icons themes are available for which we
have both. There are some requirements:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The icon theme's licence needs to allow use theme to make a derivative product. To be safe I will stick to open source licences.&lt;/li&gt;
&lt;li&gt;There needs to be enough data to teach a network. However I will intentionally not get too much data to explore data augmentation techniques.&lt;/li&gt;
&lt;li&gt;Ability to split data well in various sets: training, validation, test and real world data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let me explain the splitting of the data a little more by using an analogy.
Training a network is a bit like taking a course at university. You get
a lot of material through the course and at the end of the course there is
a final exam. You are not allowed to see the final exam.&lt;/p&gt;
&lt;p&gt;The course material is your real training data, and the final exam is test data.
The point of test data is to evaluate the real performance of the network. But
the test data is part of the course. I have another data set, a real world data
which is there for me to use the network a first time on a real task; in other
words none course material. The real world data will correspond to some old
icon sets (OS2, CDE).&lt;/p&gt;
&lt;p&gt;Furthermore real training data will be split. To use our analogy to learn the
course and pass the final exam with a good grade you do practice tests. This
is done by splitting our real training data into a smaller training data set
and a validation data set.&lt;/p&gt;
&lt;p&gt;So to recap we have :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Training data : Use for training the network&lt;/li&gt;
&lt;li&gt;Validation data : Use for evaluating the training&lt;/li&gt;
&lt;li&gt;Test data : Use for evaluating the performance of the network&lt;/li&gt;
&lt;li&gt;Real world data : To test the use of the software on an actual use case.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let me explain a bit more about the use of real world data.
I have chosen two really old icon themes for which
no svg formats are available. I can't learn to upscale those images
but I would be very much interested in doing so. This data set allows me
to judge whether the project has been a success in a qualitative way.&lt;/p&gt;
&lt;p&gt;Because no svg
files are available an official metric can't be calculated,
which is why we need a testing data set with svg icons.
Using old icons with no svg file format will showcase
whether using deep learning is actually useful for reviving
old icon sets. The old icon themes are the official
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Desktop_Environment"&gt;CDE&lt;/a&gt;
icon theme and the icon theme from &lt;a class="reference external" href="https://en.wikipedia.org/wiki/OS/2"&gt;OS/2&lt;/a&gt;.&lt;/p&gt;
</content><category term="Linux, HiDPI, PixelPal"></category></entry><entry><title>Pixel Pal (PART 1) : Adapting old icon themes for HiDPI screens</title><link href="https://michal.parusinski.me/pixel-pal-adapting-old-icon-themes-for-hidpi-screens.html" rel="alternate"></link><published>2020-01-27T18:46:00+01:00</published><updated>2020-01-27T18:46:00+01:00</updated><author><name>Michal Parusinski</name></author><id>tag:michal.parusinski.me,2020-01-27:/pixel-pal-adapting-old-icon-themes-for-hidpi-screens.html</id><summary type="html">&lt;p&gt;I am starting a new open source project. The goal of this project
is to solve a recurring issue with HiDPI support. The issues is that
many old software rely on icon themes in raster format which are not suitable for HiDPI
screens. To be more specific various software projects …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am starting a new open source project. The goal of this project
is to solve a recurring issue with HiDPI support. The issues is that
many old software rely on icon themes in raster format which are not suitable for HiDPI
screens. To be more specific various software projects rely on icons which are
only in raster formats (e.g. JPG, PNG, ...) but not in vector format (e.g. SVG)
and are only available in low resolutions formats (e.g. 32x32) which is fine
for non HiDPI screens but there is no equivalent for high resolution formats
required by HiDPI (e.g. 64x64). The naive solution is to simply is to do
pixel doubling, but this results in an ugly pixelated look. My new project
will use some tools from artificial intelligence to do better.&lt;/p&gt;
&lt;p&gt;The way to solve this issue using artificial intelligence is to use super
resolution deep learning &lt;a class="reference external" href="https://arxiv.org/pdf/1808.03344.pdf"&gt;models&lt;/a&gt;.
These deep learning neural networks rely on images not being random but
representations of real things where there are subtle statistical relations
between the pixels of an image in practice. A simple example of how pixels
can be related to one another is that often there are lines and curves in
images.&lt;/p&gt;
&lt;p&gt;A series of blog posts will detail the progress of the project.&lt;/p&gt;
</content><category term="Linux, HiDPI, PixelPal"></category></entry></feed>